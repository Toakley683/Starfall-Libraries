--@name sorting_algorithm_library
--@author toakley682
--@shared
--@include libs/screen_render_library.txt
--@include https://raw.githubusercontent.com/Jacbo1/Public-Starfall/main/SafeNet/safeNet.lua as SafeNet
local net = require("SafeNet")
require( "libs/screen_render_library.txt" )

if CLIENT then
    
    local Screen = ScreenRender()
    Screen:NewScreen( chip():getPos() + Vector( 0, 0, 50 ), chip():getAngles() + Angle( 90, 0, 0 ), "models/hunter/plates/plate2x2.mdl", true )
    
    Sorting = class( "Sorting" )
    
    function Sorting:initialize( Callback )
        
        self.Delay = 0.005
        
        net.receive( "Solve", function()
            
            self.Data = net.readTable()
            self.DataLength = table.count( self.Data )
            
            Callback( self )
            
            Screen.FPS = 1 / self.Delay
            
            if self.Fastest == true then Screen.FPS = 5000 end
            
            Screen:Setup()
            
            self:Setup()
            
        end)
    
        self.Roboto = render.createFont( "Roboto", 24, 550, true )
        
        self.Sort = function() end
        
        self.Index = 0
        
        self.Spacing = 4
        self.MaxY = 768
        
        self.Completed = false
        self.Executions = 0
        
        self.Fastest = false
        
        self.Coroutine = nil
        
    end
    
    local IssueID = 0
    
    function Sorting:Iter()
        
        if self.Index >= self.DataLength then self.Index = 0 end
        self.Index = math.clamp( self.Index + 1, 0, self.DataLength )
        
        local TempData = self.Sort( self.Index, self.Data )
        
        if TempData != nil then
            
            self.Executions = self.Executions + 1
            
            self.Data = TempData
            
        else self.Index = self.DataLength end
        
        if TempData == self.Data then
            
            if sound.canEmitSound() then chip():emitSound( "weapons/grenade/tick1.wav", 75, 85 + ( self.Index / self.DataLength ) * 5, 75 ) end
            
            if self.Index >= self.DataLength - 1 then
                
                self.Completed = false
                
                for Index, Value in ipairs( self.Data ) do
                    
                    if not self.Data[ Index + 1 ] then continue end
                    if not self.Data[ Index ] then continue end
                    
                    if self.Data[ Index + 1 ] < self.Data[ Index ] then return  end
                    
                    if Index >= table.count( self.Data ) - 1 then 
                        
                        if sound.canEmitSound() then chip():emitSound( "garrysmod/content_downloaded.wav", 75, 100, 150 ) end
                        self.Completed = true 
                        
                    end
                    
                end
                
                if self.Completed then return end
                
            end
            
        end
        
    end
    
    function Sorting:Setup()
        
        Screen.Render = function()
            
            render.setFont( self.Roboto )
            render.clear()
            
            if self.Completed then 
                
                render.setColor( Color( 77, 200, 77 ) )
                render.drawText( 25, 25, "Status: Complete", 0 )
                render.drawText( 25, 50, "Iteration: " .. self.Executions, 0 )
                render.drawText( 25, 75, "Index: " .. self.Index .. "/" .. self.DataLength, 0 )
                
            else 
                
                render.setColor( Color( 200, 35, 35 ) )
                render.drawText( 25, 25, "Status: Incomplete", 0 )
                render.drawText( 25, 50, "Iteration: " .. self.Executions, 0 )
                render.drawText( 25, 75, "Index: " .. self.Index .. "/" .. self.DataLength, 0 )
                
            end
            
            render.setColor( Color( 255, 255, 255 ) )
            
            for Index, Value in ipairs( self.Data ) do
                
                if Index == self.Index or Index == IssueID then 
                    
                    render.setColor( Color( 255, 60, 60 ) ) 
                    
                else
                    
                    render.setColor( Color( 255, 255, 255 ) ) 
                    
                end
                
                if self.Completed then render.setColor( Color( 77, 200, 77 ) ) end
                
                local X = 1024 / self.DataLength
                local Y = ( Value / self.DataLength ) * self.MaxY
                
                render.drawRectFast( ( X * ( Index - 1 ) ) + self.Spacing, 1024 - Y, X - self.Spacing / 2, Y )
                
            end
            
            if not self.Coroutine then
                
                self.Coroutine = coroutine.create( function()
                    
                    if self.Completed == true then return end
                    
                    if quotaAverage() > quotaMax() * 0.1 then coroutine.yield() end
                    
                    if self.Fastest == true then
                        
                        local Iters = self.DataLength * 4                        
                        for I = 1, Iters do
                            
                            if self.Completed == true then return end
                            
                            self:Iter()
                            
                        end
                        
                        return
                        
                    end
                    
                    self:Iter()
                    
                end)
                
            else
                
                if coroutine.status( self.Coroutine ) == "suspended" and quotaAverage() < quotaMax() * 0.1 then
                    
                    coroutine.resume( self.Coroutine )
                    
                end
                
                if coroutine.status( self.Coroutine ) == "dead" then
                    
                    self.Coroutine = nil
                    
                end
                
            end
            
        end
        
    end
    
else
    
    local InitPlrs = {}
    
    hook.add( "ClientInitialized", "", function( Player )
        
        InitPlrs[ table.count( InitPlrs ) + 1 ] = Player
        
    end)
    
    Init = class( "ServerInitialize" )
    
    function Init:initialize( TableAmount, TrueRandom )
        
        if not TableAmount then TableAmount = 128 end
        if TrueRandom == nil then TrueRandom = false end
        
        local ToSortData = {}
        
        for I = 1, TableAmount do
            
            if TrueRandom == true then ToSortData[ I ] = math.random( 1, TableAmount ) continue end
            
            ToSortData[ I ] = I
            
        end
        
        table.shuffle( ToSortData )
        
        timer.create( "InitializePlayers", 1 / 16, 0, function()
            
            if table.count( ToSortData ) < TableAmount then return end
            
            local Player = InitPlrs[1]
            if Player == nil then return end
            
            net.start( "Solve" )
            net.writeTable( ToSortData )
            net.send( Player )
            
            table.remove( InitPlrs, 1 )
            
        end)
        
    end
    
end